待合并方法
    1、_preprocess_datay
    2、_update_constraints
    3、


问题：
    1、找到所有与主煤挥发分差值在max_diff内的煤
    2、反射率计算：为什么是矩阵相乘来求解
    3、配合煤反射率区间值计算逻辑：煤种占比向量与配合煤区间值点积
    4、配合煤方差计算：
        1、mid_points：中点值一维行矩阵
            [0.475, 0.525, 0.575, 0.625, 0.675, 0.725, 0.775, 0.825, 0.875, 0.925, 0.975, 1.025, 1.0750000000000002, 1.125, 1.1749999999999998, 1.225, 1.275, 1.3250000000000002, 1.375, 1.4249999999999998, 1.475, 1.525, 1.5750000000000002, 1.625, 1.6749999999999998, 1.725, 1.775, 1.8250000000000002, 1.875, 1.9249999999999998, 1.975, 2.025, 2.075, 2.125, 2.175, 2.225, 2.275, 2.325, 2.375, 2.425, 2.475, 2.525]
            
        2、ratios：各煤种占比一维行矩阵
            array([0.00000000e+00, 9.40860219e+01, 0.00000000e+00, 0.00000000e+00,3.30795077e-12, 8.56973742e-16, 3.05673614e-11, 0.00000000e+00,5.91397814e+00, 4.11658674e-16, 0.00000000e+00, 0.00000000e+00,0.00000000e+00, 3.35299609e-12, 0.00000000e+00, 0.00000000e+00,0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,0.00000000e+00, 3.77195410e-13, 0.00000000e+00, 0.00000000e+00,1.14697318e-12, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,0.00000000e+00, 0.00000000e+00, 9.05041440e-13])

        3、reflect_matrix：每个煤的反射率矩阵，二维矩阵
            [  
                array([0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,0. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,0. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  1.2,  2.8,  4. ,  7.2,  8. ,  9.6, 11.9,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  5.2, 11.6, 19.6, 22. , 17. , 11. ,  6.7,  3.2,  1.4,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  1. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  2.2,  8.7,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.4,  5. , 13.5, 25.9, 29. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.4,  1.3,  2. ,  3. ,  2.8,  5.4,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  2.7,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.5,  2.6,  5.4,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  2.7,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.4,  1.3,  2. ,  3. ,  2.8,  5.4,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.9,  7.1,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1.8,  6.3, 12.6, 21.4,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...., 0., 0., 0., 0., 0., 0., 0., 0.]), 
                array([ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  4.5,... 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ])
            ]
        4、计算过程：
            1、计算每个反射区域中间值：mid_points = []
            2、计算混合分布：将比率与反射矩阵相乘并归一化：  mixture_dist = np.dot(ratios, reflect_matrix) / total
            3、计算混合分布的均值：mean = np.dot(mixture_dist, mid_points)
            4、计算混合分布的方差：variance = np.dot(mixture_dist, (mid_points - mean) ** 2)
            5、标准差（方差的平方根）：np.sqrt(variance)